Удаленная сборка и отладка приложения Orange PI
    - используется NFS (для редактирования)
    - Сборка. Удаленная и локальная (SSH, Makefile, etc)
    - Visual Studio Code
    - GIT
    - Remote Debug
    
    1. Настройка NFS
    На стороне сервера (Orange PI PC)
        http://goodigy.ru/nfs_ubuntu_14.04
        apt-get install nfs-kernel-server
        mkdir ~/share
        sudo nano /etc/exports
        /home/paramra/share 192.168.1.0/255.255.255.0 (rw,async,insecure,nohide,all_squash,anonuid=1000,anongid=1000)
        sudo service nfs-kernel-server restart

    На стороне клиента (Ubuntu)
        mkdir ~/share
        sudo mount -t nfs 192.168.1.110:/home/paramra/share /home/paramra/share
        Можно, также, прописать запись в fstab, чтобы папка монтировалась при загрузке
        sudo nano /etc/fstab
        И добавляем туда строку
        192.168.1.110:/home/paramra/share /home/paramra/share nfs user,rw 0 0

    2. Сборка. Удаленная и локальная (SSH, Makefile, etc)
        Нужно сделать Makefile, который в зависимости от платформы будет генерить соответствующий код. Должна быть предусмотрена возможность принудительного изменения платформы.
        - как сделать заход в SSH без пароля (https://wiki.hasanov.ru/ubuntu/ssh-suth-no-pass)
            на Оранже:
            $ mkdir .ssh
            $ cd .ssh/
            на хосте:
            scp /home/paramra/.ssh/id_rsa.pub paramra@192.168.1.110:.ssh/authorized_keys2
            ***Важно***: 
                если файл authorized_keys2 уже существует, то его нужно просто дописать:
                mkdir $HOME/.ssh 
                chmod 700 $HOME/.ssh 
                cat ~/.ssh/id_rsa.pub | ssh hosname "cat >> .ssh/authorized_keys2"
            
            ТЕПЕРЬ ВСЕ РАБОТАЕТ И ПЕРЕГРУЖАТЬ СЕРВИС НЕ НАДО!

        - как запустить make на удаленной платформе
            ssh paramra@192.168.1.110 'cd /home/paramra/share/dbgTest && make'
            в Makefile делаем так:
            # gcc -g -o dbgTest.out main.c test.c
	        ssh paramra@192.168.1.110 'cd /home/paramra/share/dbgTest && gcc -g -o dbgTest.out main.c test.c'

        - как определить тип платформы
            возможно это и не надо, достаточно собрать под обе платформы
    
    3. Visual Studio Code
        Folding in VS Code (http://qaru.site/questions/33237/how-do-i-collapse-sections-of-code-in-visual-studio-code-for-windows):
            Сложить все: CTRL + K, CTRL + 0 (ноль)
            Уровень Fold [n]: CTRL + K, CTRL + [n] *
            Развернуть все: CTRL + K, CTRL + J
            Fold Region: CTRL + K, CTRL + [
            Развернуть регион: CTRL + K, CTRL + ]
        
        Как сделать сборку с Makefile
            - просто добавим в каталог проекта наш Makefile
            - в файле tasks.json в секцию "label": "compile and run" добавим "args": ["make", "&&", "./dbgTest.out"], имя исполняемого файла указано явно чтобы можно было нажимать Ctrl-Shift-B, находясь в любом файле

    4. Удаленная отладка




------------------------------------------------------------------------------------------------------------------------------------------------------

Предопределённые константы #define
Константы, создаваемые препроцессором автоматически:

__LINE__ заменяется на номер текущей строки; номер текущей строки может быть переопределен директивой #line; используется для отладки;
__FILE__ заменяется на имя файла; имя файла тоже может быть переопределено с помощью директивы #line;
__FUNCTION__ заменяется на имя текущей функции;
__DATE__ заменяется на текущую дату (на момент обработки кода препроцессором);
__TIME__ заменяется на текущее время (на момент обработки кода препроцессором);
__TIMESTAMP__ заменяется на текущие дату и время (на момент обработки кода препроцессором);
__COUNTER__ заменяется на уникальное число, начиная от 0; после каждой замены число увеличивается на единицу;
__STDC__ заменяется на 1, если компиляция происходит в соответствии со стандартом языка C;
__STDC_HOSTED__ определена в C99 и выше; заменяется на 1, если выполнение происходит под управлением ОС;
__STDC_VERSION__ определена в C99 и выше; для C99 заменяется на число 199901, а для C11 — на число 201112;
__STDC_IEC_559__ определена в C99 и выше; константа существует, если компилятор поддерживает операции с числами с плавающей точкой по стандарту IEC 60559;
__STDC_IEC_559_COMPLEX__ определена в C99 и выше; константа существует, если компилятор поддерживает операции с комплексными числами по стандарту IEC 60559; стандарт C99 обязывает поддерживать операции с комплексными числами;
__STDC_NO_COMPLEX__ определена в C11; заменяется на 1, если не поддерживаются операции с комплексными числами;
__STDC_NO_VLA__ определена в C11; заменяется на 1, если не поддерживаются массивы переменной длины; в С99 массивы переменной длины обязательно должны поддерживаться;
__VA_ARGS__ определена в C99 и позволяет создавать макросы с переменным числом аргументов.
            
